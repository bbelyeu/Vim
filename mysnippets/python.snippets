snippet loggerdump "Var dump variable" b
from logger import logger
logger.debug("=" * 100)
logger.debug(${1})
logger.debug("=" * 100)
endsnippet

snippet mcs "Memcache set" b
ns_version = memcache.set_ns_version(ns_version_key, ns_version)
memcache.set(cache_key, response, ns_version=ns_version)
endsnippet

snippet mcg "Memcache get" b
ns_version = memcache.get(ns_version_key)
cache_key = ('${1:api_version}', '${2:method}', params)
response = memcache.get(cache_key, ns_version=ns_version)
endsnippet

snippet parms "Colander deserialize params" b
try:
    params = schema.deserialize(params)
except colander.Invalid, e:
    return self.api.build_error_response(
        400, e.asdict(), '${1:api_name}'
    )
endsnippet

snippet docs "Doc string" b
"""${1}.

${2}
"""
endsnippet

snippet docsinline "Single line doc string" b
"""${1}."""
endsnippet

snippet cap "Logger Sentry capture" b
logger.capture(
    '${1:raven.events.Message}',
    message='${2}',
    exc_info=sys.exc_info(),
    data={
        'sentry.interfaces.Http': {
            'env': dict(os.environ),
        },
        'culprit': '${3:full.module.name}'
    },
    extra=${4:dict}
)
endsnippet

snippet tmpfile "Create a temporary file for use from request" b
r = requests.get(url, stream=True)
if r.status_code == 200:
    tmp = tempfile.TemporaryFile()
    for chunk in r.iter_content(chunk_size=1024):
        if chunk:
            tmp.write(chunk)
            tmp.flush()
    tmp.seek(0)
    # Do stuff with tmp file
    tmp.close()
endsnippet

snippet script-logging-stdout "Add logging module and add stdout handler" b
import logging
import sys

root = logging.getLogger()
root.setLevel(logging.DEBUG)

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
root.addHandler(ch)
endsnippet

snippet main "Add __main__ to python cli script" b
if __name__ == '__main__':
    main()
endsnippet

snippet debugger "Add PyCharm debugger code to api_dispatcher"
    if os.environ['api_env'] == 'dev' and app.debug and [s for s in sys.path
                                                         if 'pycharm-debug.egg' in s]:
        try:
            import pydevd
            pydevd.settrace('192.168.50.1', port=50644, stdoutToServer=True, stderrToServer=True,
                            suspend=False)
            logger.debug('pydevd running')
        except Exception as e:
            logger.debug("Couldn't load pydevd", e)
endsnippet

snippet pudb "PUDB debug code"
from pudb import set_trace; set_trace()
pass
endsnippet

snippet demo1 "Add Babel import"
from flask.ext.babel import Babel
endsnippet

snippet demo2 "Wrap app with Babel"
babel = Babel(app)
endsnippet

snippet demo3 "Import request from flask"
from flask import request
endsnippet

snippet demo4 "Setup Babel locale selector"
@babel.localeselector
def get_locale():
    locales_our_app_supports = ['en', 'es', 'fr']
    return request.accept_languages.best_match(locales_our_app_supports)
endsnippet

snippet demo5 "Import gettext"
from flask.ext.babel import gettext, ngettext
endsnippet

# vim:ft=snippets:
