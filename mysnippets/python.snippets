snippet loggerdump "Var dump variable" b
from logger import logger
logger.debug("=" * 100)
logger.debug(${1})
logger.debug("=" * 100)
endsnippet

snippet docs "Doc string" b
"""${1}.

${2}
"""
endsnippet

snippet docsinline "Single line doc string" b
"""${1}."""
endsnippet

snippet cap "Logger Sentry capture" b
logger.capture(
    '${1:raven.events.Message}',
    message='${2}',
    exc_info=sys.exc_info(),
    data={
        'sentry.interfaces.Http': {
            'env': dict(os.environ),
        },
        'culprit': '${3:full.module.name}'
    },
    extra=${4:dict}
)
endsnippet

snippet tmpfile "Create a temporary file for use from request" b
r = requests.get(url, stream=True)
if r.status_code == 200:
    tmp = tempfile.TemporaryFile()
    for chunk in r.iter_content(chunk_size=1024):
        if chunk:
            tmp.write(chunk)
            tmp.flush()
    tmp.seek(0)
    # Do stuff with tmp file
    tmp.close()
endsnippet

snippet logging-stdout "Add logging module and add stdout handler" b
import logging
import sys

root = logging.getLogger()
root.setLevel(logging.DEBUG)

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
root.addHandler(ch)
endsnippet

snippet main "Add __main__ to python cli script" b
import logging


def main():
    "${1}."


if __name__ == "__main__":  # pragma: no cover
    logging.basicConfig()
    main()
endsnippet

snippet ogprint
builtins.print = ogprint
endsnippet

snippet pdb "PDB debug code"
breakpoint()
endsnippet

snippet pudb "PUDB debug code"
from pudb import set_trace; set_trace()
pass
endsnippet

snippet argparse "Argparse setup for scripts"
import argparse
parser = argparse.ArgumentParser(description='${1:description}')
parser.add_argument('${2:name}', type=${3:type}, help='${4:msg}')
args = parser.parse_args()
endsnippet

snippet directory "Get the directory of the current running script"
from pathlib import Path
dir_ = Path(__file__).parent.resolve()
endsnippet

snippet async "outline for an async function"
async def ${1:name}(${2:args}):
    """${3:docstring}."""
endsnippet

snippet csv "open a csv file for reading"
with open(${1:_file.csv}, mode="r", encoding="utf8") as csv_file:
    csv_reader = csv.DictReader(csv_file)
    for row in csv_reader:
endsnippet

snippet nocover "add a pragma: no cover comment"
# pragma: no cover
endsnippet

snippet solrdebug "print solr url to console for ez web ui debugging"
import debug
debug.print_solr_url(collection="${1:verses}", **kwargs)
endsnippet

snippet shebang "add shebang line for python script"
#! /usr/bin/env python
endsnippet

# vim:ft=snippets:
